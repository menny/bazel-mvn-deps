"""
Required macros for creating repository-rules and third-party Maven dependencies.

Auto-generated by https://github.com/menny/mabel
"""

# Loading a drop-in replacement for native.http_file
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

def generate_workspace_rules(name = "generate_workspace_rules"):
    """
    Repository rules macro to be run in the WORKSPACE file.

    Args:
        name: A unique name for this target. No need to specify.
    """

    # from com.google.guava:guava:20.0
    http_file(
        name = "com_google_guava__guava__20_0",
        urls = ["https://repo1.maven.org/maven2/com/google/guava/guava/20.0/guava-20.0.jar"],
        downloaded_file_path = "guava-20.0.jar",
        sha256 = "36a666e3b71ae7f0f0dca23654b67e086e6c93d192f60ba5dfd5519db6c288c8",
    )

def kotlin_jar_support(name, deps, exports, runtime_deps, jar, tags, java_import_impl, kt_jvm_import = None, visibility = ["//visibility:public"]):
    """
    This is a help macro to handle Kotlin rules.

    Transitive rules macro to be run in the BUILD.bazel file.
    If you use kt_* rules, you MUST provide the correct rule implementation when call this macro, if you decide
    not to provide those implementations we'll try to use java_* rules.

    Args:
        name: A unique name for this target.
        deps: The list of other libraries to be linked in to the target.
        exports: Targets to make available to users of this rule.
        runtime_deps: Libraries to make available to the final binary or test at runtime only.
        jar: The JAR file provided to Java targets that depend on this target.
        java_import_impl: rule implementation for java_import.
        kt_jvm_import: rule implementation for kt_jvm_import. Can be None.
        visibility: Target visibility to pass to actual targets.
        tags: List of arbitrary text tags. Tags may be any valid string.
    """

    #In case the developer did not provide a kt_* impl, we'll try to use java_*, should work
    if kt_jvm_import == None:
        java_import_impl(
            name = name,
            jars = [jar],
            deps = deps,
            exports = exports,
            runtime_deps = runtime_deps,
            visibility = visibility,
            tags = tags,
        )
    else:
        kt_jvm_import(
            name = name,
            jar = jar,
            exports = exports,
            runtime_deps = runtime_deps,
            visibility = visibility,
            tags = tags,
        )

def generate_transitive_dependency_targets(name = "generate_transitive_dependency_targets", java_library_impl = native.java_library, java_plugin_impl = native.java_plugin, java_import_impl = native.java_import, aar_import_impl = native.aar_import, kt_jvm_import = None):
    """
    Macro to set up the transitive rules.

    You can provide your own implementation of java_import and aar_import. This can be used
    in cases where you need to shade (or jar_jar or jetify) your jars.

    Args:
        name: a unique name for this macro. Not needed to specify.
        java_library_impl: rule implementation for java_library.
        java_plugin_impl: rule implementation for java_plugin.
        java_import_impl: rule implementation for java_import.
        aar_import_impl: rule implementation for aar_import.
        kt_jvm_import: rule implementation for kt_jvm_import.
    """

    # from com.google.guava:guava:20.0
    native.alias(
        name = "com_google_guava__guava",
        actual = ":com_google_guava__guava__20_0",
        visibility = ["//visibility:public"],
    )

    # from com.google.guava:guava:20.0
    java_import_impl(
        name = "com_google_guava__guava__20_0",
        jars = ["@com_google_guava__guava__20_0//file"],
        tags = ["maven_coordinates=com.google.guava:guava:20.0"],
        licenses = ["notice"],
        deps = [],
        exports = [],
        runtime_deps = [],
    )
