
load("//program/main_deps:dependencies.bzl", "generate_transitive_dependency_targets")
generate_transitive_dependency_targets()

load("@mabel//rules/maven_deps:maven_deps_workspace_generator.bzl", "deps_workspace_generator_rule", "artifact")

deps_workspace_generator_rule(name = 'main_deps',
    maven_deps = [
        artifact("com.google.dagger:dagger:2.19"),
        artifact("com.google.dagger:dagger-compiler:2.19"),
        artifact("com.google.auto.value:auto-value:1.6.3"),
        artifact("com.google.auto.value:auto-value-annotations:1.6.3"),
    ],
    fetch_srcjar = False,
    output_graph_to_file = True,
    generated_targets_prefix = "apt___"
    )

java_binary(name = "java_plugin",
            srcs = ["HelloWorld.java", "Program.java"],
            main_class = "examples.java_plugin.program.HelloWorld",
            deps = [
                # we can also reference the target via the generated target. Note that we used `generated_targets_prefix` so there is a prefix.
                "//program:apt___com_google_auto_value__auto_value_annotations",
                "//program/main_deps/com/google/dagger/dagger",
                # If you want to run all detected plugins, then you can use the grouped target.
                #Note: you should add this to the `deps` and not to `plugins`. This is just the way Bazel works
                "//program:apt___com_google_auto_value__auto_value___processor_class_all"
            ],
            plugins =
                #but, you can also explicitly specify one.
                ["//program:apt___com_google_dagger__dagger_compiler___processor_class_0"]
)